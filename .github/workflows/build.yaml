on:
  push:
    branches: ['*']
    tags:
      - 0.*
      - 1.*

jobs:
  linux:
    runs-on: 'ubuntu-22.04'
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install qt6
        run: |
          sudo apt update
          sudo apt install build-essential qt6-base-dev qt6-base-private-dev libqt6svg6-dev qt6-wayland libgl1-mesa-dev

      - name: Configure and build
        run: |
          cmake -B build .
          cmake --build build

  macos:
    runs-on: macos-12
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: jurplel/install-qt-action@v3
        with:
          version: '6.3.*'
          cache: true

      - name: Setup Environment
        id: setup
        run: |
          set -e
          if [[ '${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_INSTALLER_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_CERT }}' != '' ]]; then
            echo 'haveCodesignIdent=true' >> $GITHUB_OUTPUT
            haveCodesignIdent=true
          else
            echo 'haveCodesignIdent=false' >> $GITHUB_OUTPUT
            haveCodesignIdent=false
          fi
          if [[ '${{ secrets.MACOS_NOTARIZATION_USERNAME }}' != '' && \
                '${{ secrets.MACOS_NOTARIZATION_PASSWORD }}' != '' ]]; then
            echo 'haveNotarizationUser=true' >> $GITHUB_OUTPUT
          else
            echo 'haveNotarizationUser=false' >> $GITHUB_OUTPUT
          fi
          if [[ "${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}" == true && $haveCodesignIdent == true ]]; then
            echo 'notarizePackage=true' >> $GITHUB_OUTPUT
          else
            echo 'notarizePackage=false' >> $GITHUB_OUTPUT
          fi

      - name: Install Apple Developer Certificate
        if: ${{ steps.setup.outputs.notarizePackage == 'true' }}
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          keychain-password: ${{ github.run_id }}
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERT }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}

      - name: Set Signing Identity
        if: ${{ steps.setup.outputs.notarizePackage == 'true' }}
        run: |
          set -e
          TEAM_ID=$(echo "${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}" | sed 's/.*(\([A-Za-z0-9]*\))$/\1/')
          xcrun notarytool store-credentials AC_PASSWORD \
            --apple-id "${{ secrets.MACOS_NOTARIZATION_USERNAME }}" \
            --team-id "$TEAM_ID" \
            --password "${{ secrets.MACOS_NOTARIZATION_PASSWORD }}"

      - name: Configure and build
        run: |
          cmake_opt_codesign=()
          if [ "${{ steps.setup.outputs.notarizePackage }}" == true ]; then
            TEAM_ID=$(echo "${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}" | sed 's/.*(\([A-Za-z0-9]*\))$/\1/')
            cmake_opt_codesign=(
              -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM="$TEAM_ID"
              -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY="${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}"
              -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_STYLE=Manual
              -DBUNDLE_ID='net.nagater.app.qvisca-ip'
            )
          fi

          cmake -B build . \
            -G Xcode \
            "${cmake_opt_codesign[@]}"

          cmake --build build --config RelWithDebInfo

      - name: Package
        id: package
        if: ${{ steps.setup.outputs.notarizePackage == 'true' }}
        run: |
          zipfile=$PWD/qvisca-ip-macos.zip
          (cd build/RelWithDebInfo && zip -r $zipfile *.app)

          submit_out=$(mktemp)
          xcrun notarytool submit $zipfile --keychain-profile AC_PASSWORD --wait | tee $submit_out
          id=$(awk '$1=="id:"{id=$2} END{print id}' $submit_out)
          xcrun notarytool log "$id" --keychain-profile AC_PASSWORD "notarylog.json"
          cat "notarylog.json"

          rm $zipfile
          cd build/RelWithDebInfo
          xcrun stapler staple ./*.app
          zip -r $zipfile *.app

          echo "filenames=$zipfile" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        if: ${{ steps.setup.outputs.notarizePackage == 'true' }}
        with:
          path: ${{ steps.package.outputs.filenames }}

  windows:
    runs-on: windows-2022
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: jurplel/install-qt-action@v3
        with:
          version: '6.3.*'
          cache: true

      - name: Configure and build
        env:
          CMAKE_PREFIX_PATH: ${{env.Qt6_Dir}}
        run: |
          cmake -B build . \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build build --config RelWithDebInfo -j 4

      - name: Package
        run: |
          mkdir release
          cp build/RelWithDebInfo/qvisca-ip.exe release/
          cp $(find '${{env.Qt6_Dir}}' \
            -name Qt6Widgets.dll -o \
            -name Qt6Gui.dll -o \
            -name Qt6Core.dll \
            ) release/
          mkdir release/platforms
          cp $(find '${{env.Qt6_Dir}}' -name qwindows.dll) release/platforms/
          cd release
          7z a ../qvisca-ip-windows.zip *

      - uses: actions/upload-artifact@v3
        with:
          path: ./qvisca-ip-windows.zip
